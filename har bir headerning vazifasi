üìù Har bir headerning vazifasi va ishlatilishi
Quyida har bir header haqida batafsil tushuntirish va misollar berilgan.

1Ô∏è‚É£ <thread> - Yangi oqim (thread) yaratish
Vazifasi: Yangi oqim yaratish va kodni parallel bajarish uchun ishlatiladi.
Foydalanish:

std::thread yordamida yangi oqim yaratish.
Oqimni join() yoki detach() qilish.
Misol:

cpp
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
#include <iostream>
#include <thread>

void printMessage() {
    std::cout << "Bu boshqa oqimda ishlaydi!\n";
}

int main() {
    std::thread t(printMessage); // Yangi oqim yaratish
    t.join(); // Oqim tugashini kutish
    return 0;
}
2Ô∏è‚É£ <mutex> - Resurslarni sinxronizatsiya qilish
Vazifasi: Oqimlar orasida resurslarni bloklash va sinxronizatsiya qilish.
Foydalanish:

std::mutex yordamida o‚Äòzgaruvchilarni bloklash.
lock_guard yordamida avtomatik bloklash.
Misol:

cpp
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
#include <iostream>
#include <thread>
#include <mutex>

std::mutex mtx;

void printNumber(int n) {
    std::lock_guard<std::mutex> lock(mtx); // Avtomatik qulf
    std::cout << "Son: " << n << std::endl;
}

int main() {
    std::thread t1(printNumber, 1);
    std::thread t2(printNumber, 2);
    t1.join();
    t2.join();
    return 0;
}
3Ô∏è‚É£ <shared_mutex> - O‚Äòqish va yozish blokirovkalari
Vazifasi: Bir nechta oqim o‚Äòqiy olishi, lekin faqat bitta oqim yozishi mumkin bo‚Äòlishini ta‚Äôminlaydi.
Foydalanish:

std::shared_mutex bilan parallel o‚Äòqish mumkin, yozish esa yagona oqimga cheklanadi.
Misol:

cpp
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
#include <iostream>
#include <thread>
#include <shared_mutex>

std::shared_mutex mtx;

void readData() {
    std::shared_lock lock(mtx);
    std::cout << "O'qilmoqda...\n";
}

void writeData() {
    std::unique_lock lock(mtx);
    std::cout << "Yozilmoqda...\n";
}

int main() {
    std::thread t1(readData);
    std::thread t2(writeData);
    t1.join();
    t2.join();
    return 0;
}
4Ô∏è‚É£ <condition_variable> - Oqimlar orasida signallar jo‚Äònatish
Vazifasi: Oqimlarni uyg‚Äòotish va kutish uchun ishlatiladi.
Foydalanish:

std::condition_variable yordamida oqimlarni uyg‚Äòotish yoki kutish.
Misol:

cpp
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
#include <iostream>
#include <thread>
#include <condition_variable>

std::mutex mtx;
std::condition_variable cv;
bool ready = false;

void worker() {
    std::unique_lock<std::mutex> lock(mtx);
    cv.wait(lock, [] { return ready; }); // Oqimni kutish
    std::cout << "Ish boshladi\n";
}

int main() {
    std::thread t(worker);
    std::this_thread::sleep_for(std::chrono::seconds(1));
    
    {
        std::lock_guard<std::mutex> lock(mtx);
        ready = true;
    }
    cv.notify_one(); // Oqimni uyg‚Äòotish
    
    t.join();
    return 0;
}
5Ô∏è‚É£ <future> - Parallel hisoblash natijalarini kutish
Vazifasi: Oqim parallel ishlaganda natijalarni kutish va qaytarish.
Foydalanish:

std::async bilan parallel hisoblash.
std::future natijalarni olish uchun ishlatiladi.
Misol:

cpp
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
#include <iostream>
#include <future>

int computeSum(int a, int b) {
    return a + b;
}

int main() {
    std::future<int> result = std::async(computeSum, 5, 10);
    std::cout << "Natija: " << result.get() << std::endl;
    return 0;
}
6Ô∏è‚É£ <atomic> - Atomar o‚Äòzgaruvchilar
Vazifasi: Parallel o‚Äòzgaruvchilar xavfsiz ishlashi uchun atomik operatsiyalarni ta‚Äôminlaydi.
Foydalanish:

std::atomic<int> yordamida xavfsiz o‚Äòzgaruvchilar yaratish.
Misol:

cpp
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
#include <iostream>
#include <thread>
#include <atomic>

std::atomic<int> counter(0);

void increment() {
    for (int i = 0; i < 1000; ++i) {
        counter++;
    }
}

int main() {
    std::thread t1(increment);
    std::thread t2(increment);
    t1.join();
    t2.join();
    std::cout << "Natija: " << counter << std::endl;
    return 0;
}
üéØ Xulosa
Agar siz ko‚Äòp oqimli dasturlash (multithreading) bilan ishlashni istasangiz, quyidagi kutubxonalar yordam beradi:

Agar sizga kerak bo‚Äòlsa...	Qaysi header?
üèÅ Yangi oqim yaratish	<thread>
üîí Oqimlarni sinxronizatsiya qilish	<mutex>, <shared_mutex>
üîî Oqimlarni uyg‚Äòotish/kutish	<condition_variable>
üöÄ Parallel hisoblash	<future>
‚ö° Atomik operatsiyalar	<atomic>
